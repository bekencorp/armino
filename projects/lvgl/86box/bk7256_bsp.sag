USER_SECTIONS	.nds_vector
USER_SECTIONS	.itcm_sec_code
USER_SECTIONS	.dtcm_sec_data
USER_SECTIONS	.dtcm_sec_bss

USER_SECTIONS	.video_spec_data
USER_SECTIONS	.media_bss_data
USER_SECTIONS	.swap_data
USER_SECTIONS	.itcm
USER_SECTIONS	.interrupt.text
USER_SECTIONS	.interrupt.HalTrapVector.text.HalTrapVector
USER_SECTIONS   .sram_nocache
USER_SECTIONS   .sram_cache


CPU0_LOAD1 0x00010000 0x8800
{
    FLASH1 0x00010000 0x800
	{
		* KEEP (.nds_vector)
	}

	ITCM 0x10000000 0x8000
	{
		LOADADDR NEXT _itcm_lma_start
		ADDR NEXT _itcm_ema_start
		* KEEP (.itcm_sec_code LMA_FORCE_ALIGN)
		LOADADDR _itcm_lma_end
		ADDR _itcm_ema_end
	}

}

CPU0_LOAD2 0x00018800  0x357800
{
    FLASH2 +0
	{
		* KEEP (.interrupt.text)
		* KEEP (.interrupt.HalTrapVector.text.HalTrapVector)
		* KEEP (.itcm)

		* (+RO)
	}

	DTCM 0x20000000 0x7800
	{
		LOADADDR NEXT _dtcm_lma_start
		ADDR NEXT _dtcm_ema_start

		* KEEP (.dtcm_sec_data LMA_FORCE_ALIGN)

		LOADADDR _dtcm_lma_end
		ADDR _dtcm_ema_end

		ADDR _dtcm_bss_start

		* KEEP (.dtcm_sec_bss)

		ADDR _dtcm_bss_end
	}

	SRAM_VEDIO 0x30000000 0xA000
	{
		ADDR NEXT   _video_start
		* KEEP (.video_spec_data)
	}

	SRAM_DATA 0x30016000 0x2A000
	{
		* KEEP (.sram_nocache)
		LOADADDR NEXT _data_lmastart
		ADDR NEXT _data_start
		*(+RW,+ZI LMA_FORCE_ALIGN)

		STACK = 0x20007FE0

	}

	SRAM_CACHE 0x38000000 0x40000
	{
		* KEEP (.sram_cache)
	}

	SWAP 0x30014000 0x400
	{
		ADDR NEXT _swap_start
		* KEEP (.swap_data)
	}
}
